[env:build]
compulsory=false
description=Basic compilation settings.
ns=env/build
sort-key=d
title=Basic compilation

[env:compilation]
compulsory=false
description=Override default compilers and compiler flags.
ns=env/compilation
sort-key=g
title=Advanced compilation

[env:config]
compulsory=false
description=Select the fcm-make configuration files.
ns=env/config
sort-key=a
title=Configuration file

[env:extract]
compulsory=false
description=Source extract locations.
ns=env/extract
sort-key=c
title=Sources

[env:keys]
compulsory=false
description=Platform- and build-specific preprocessing.
           =Click on the "Preprocessing" tab for additional help.
help=In the "Preprocessing" panel you can define which C preprocessor macros
    =(CPP keys) will be applied to the compilation. These affect which parts of
    =the source code are passed on to the compiler for building.
    =
    =These choices are principally made by adjusting the switches in the
    ="Preprocessing" panel, but other methods of controlling the CPP keys
    =are available. The CPP keys are applied in the following way:
    =
    =keys_atmos =
    =
    =       keys_platform (CPP keys applied to all builds of this type
    =                      (parallel or serial) on this platform)
    =                                     +
    =      keys_platform_extra (additional user-defined keys applied to all builds)
    =                                     +
    =      keys_atmos_app (CPP keys specific to the atmos build)
    =                                     +
    =      keys_atmos_extra (additional user-defined keys for the atmos build)
    =
    =Here the 'atmos' compilation has been used as an example, but the same
    =structure and naming system applies to all UM executables: recon, scm,
    =createbc, etc.
    =
    =Keys_platform and keys_atmos_app (keys_recon_app, etc.) are automatically
    =populated by the central fcm-make configs based on your choices in the
    =app. Keys_platform_extra and keys_atmos_extra (etc.) are provided for
    =users to add additional CPP keys as desired. It is not necessary to
    =redefine the entire list of keys for an executable in order to add
    =additional keys.
    =
    =Therefore:
    =
    = - If you wish to add additional macros into the compilation for a
    =     specific executable, add them to the appropriate keys_exec_extra
    =     variable, e.g. env=keys_atmos_extra for an atmos executable.
    =
    = - If you wish to add additional macros for all executables, add them to
    =     env=keys_platform_extra (or to each of the relevant keys_exec_extra
    =     variables, as above).
    =
    = - If you wish to remove or replace existing macros applied to a
    =     particular executable, provide an alternative list of macros to be
    =     used with the appropriate variable, e.g. env=keys_atmos_app.
    =
    = - If you wish to remove or replace existing macros applied to all builds
    =     (defined in the central fcm-make configs), provide an alternative list
    =     of CPP keys using env=keys_platform.
    =
    =Note also that the appropriate keys_exec variable, e.g. env=keys_atmos,
    =can be used to provide a complete list of ALL the C preprocessor macros
    =that will be applied to a particular executable. All other CPP key settings
    =will be ignored for that executable.
    =
    =Please be aware that unlike compiler or library options, where some flags
    =take precedence over others depending on the order in which they are
    =applied, all CPP keys provided will be applied to a compilation. For
    =example, it is incorrect to set env=portio_version = 2A but then also
    =to define:
    =  env=keys_recon_extra = C95_2B=c95_2b
    =This will result in both the C95_2A and C95_2B macros being applied to the
    =reconfiguration build and the compilation will fail.
ns=env/keys
sort-key=f
title=Preprocessing

[env:paths]
compulsory=false
description=External include and library paths.
ns=env/paths
sort-key=e
title=External libraries

[env:steps]
compulsory=false
description=Extract, mirror and compilation steps.
ns=env/steps
sort-key=b
title=Make steps

[env=ATMOS_EXEC]
compulsory=false
description=Atmosphere executable name.
help=The name of the atmosphere executable to be built.
    =
    =The default value is set in the 'common' UM fcm-make configs.
    =
    =The ATMOS_EXEC variable is common to both UM build and runtime apps
    =and so a single variable in a suite can be used to set the name of
    =the executable that will be compiled and then run. Note that if this
    =is set to a full directory path, that entire path will appear as
    =a subdirectory of the bin directory where the executables are produced,
    =e.g. .../build-atmos/bin/some/path/my_atmos.exe
ns=env/build
sort-key=c1

[env=COUPLER]
compulsory=true
description=Select coupler.
help=The name of the coupler executable or library, if any. Setting this to
    =anything other than none will add CPP macros and the coupling library (if
    =available) to the build:
    =
    =none: No coupling library or additional C preprocessor macros.
    =OASIS3-MCT: Adds the coupling library and both the OASIS3 and MCT macros.
    =
    =The COUPLER variable is common to both UM build and runtime apps; this
    =means a single variable can be set in a suite which controls whether
    =a coupler is activated for both the compilation and the model run.
ns=env/build
sort-key=a5
value-titles=none,OASIS3-MCT,defined by suite
values=none,oasis3_mct,$COUPLING

[env=DR_HOOK]
compulsory=true
description=Compile with Dr Hook.
help=Choose whether to compile executables using the Dr Hook profiling library.
    =Setting this to "on" will apply the Dr Hook compiler and library flags and
    =the DRHOOK C preprocessor macro to the build.
    =
    =The DR_HOOK variable is common to both UM build and runtime apps; this
    =means a single variable can be set in a suite which controls whether
    =Dr Hook is on or off for both the compilation and the model run.
    =
    =When compiling with Dr Hook you should disable any prebuilds (or use a
    =prebuild compiled with Dr Hook); this prevents the dummy Dr Hook libraries
    =(which are contained in the UM) from being used in place of the actual
    =libraries.
    =
    =Dr Hook is a library written by ECMWF which can produce run-time profiling
    =information such as:
    =
    = - Per-routine profiling information based on walltime, CPU-time and
    =      Mflops.
    = - Tracebacks in the event of code failure. A developer can force a
    =      traceback at any point in the code with an appropriate call to the
    =      Dr Hook library.
    = - Memory usage information.
    =
    =Output from Dr Hook is configured from the "Dr Hook Settings" panel in the
    ="env" section of a UM runtime app.
    =
    =NOTE: If you wish to compile with Dr Hook and you are also setting a
    =variable that replaces the list of C preprocessor macros used by your
    =compilation, such as env=keys_atmos_app or env=keys_atmos, you must
    =explicitly add DRHOOK=drhook to the list of keys provided.
ns=env/build
sort-key=a4
value-titles=off,on,defined by suite
values=false,true,$DRHOOK
warn-if=this == 'true' and env=prebuild; # Deactivate prebuilds or use a prebuild compiled with Dr Hook

[env=RECON_EXEC]
compulsory=false
description=Reconfiguration executable name.
help=The name of the reconfiguration executable to be built.
    =
    =The default value is set in the 'common' UM fcm-make configs.
    =
    =The RECON_EXEC variable is common to both UM build and runtime apps
    =and so a single variable in a suite can be used to set the name of
    =the executable that will be compiled and then run. Note that if this
    =is set to a full directory path, that entire path will appear as
    =a subdirectory of the bin directory where the executables are produced,
    =e.g. .../build-atmos/bin/some/path/my_recon.exe
ns=env/build
sort-key=d1

[env=SCM_EXEC]
compulsory=false
description=SCM executable name.
help=The name of the Single Column Model executable to be built.
    =
    =The default value is set in the 'common' UM fcm-make configs.
    =
    =The SCM_EXEC variable is common to both UM build and runtime apps
    =and so a single variable in a suite can be used to set the name of
    =the executable that will be compiled and then run. Note that if this
    =is set to a full directory path, that entire path will appear as
    =a subdirectory of the bin directory where the executables are produced,
    =e.g. .../build-atmos/bin/some/path/my_scm.exe
ns=env/build
sort-key=e1

[env=casim_base]
compulsory=false
description=CASIM base extract source.
help=The basename for the extract of the CASIM source code, i.e. the
    =place in the CASIM project tree to take the primary extract from,
    =such as the trunk or a branch. Defaults to "trunk".
    =
    =Unless a path to a Subversion repository is specified this is taken
    =to be relative to the location defined by env=casim_project_location.
    =
    =This is the source code against which your branches, working
    =copies etc. will be compared against and merged with prior to the
    =build. To build directly from a branch instead of merging changes
    =into the trunk, use e.g.
    =    branches/dev/user/um10.1_trunk_override.
    =
    =Use env=casim_rev to specify the revision of the base extract.
    =
    =Using an FCM keyword or Subversion URL here will override the value
    =of env=casim_project_location for the primary extract only (i.e. not
    =for any branches). If all your source code lies in a different
    =repository, modify that variable instead.
ns=env/extract
sort-key=d2

[env=casim_project_location]
compulsory=false
description=Location of the CASIM project.
help=The location of the CASIM project tree, in a Subversion repository.
    =This can be an FCM keyword, a Subversion URL or a file path.
    =Defaults to "fcm:casim.xm".
    =
    =When working with the shared repository this must point to the
    =local mirror of the repository, not the shared repository itself.
    =
    =Unless explicitly specified with a full path to a repository,
    =the values of env=casim_base and env=casim_sources are taken
    =relative to this location.
ns=env/extract
sort-key=d1

[env=casim_rev]
compulsory=true
description=CASIM base extract revision.
help=The revision of the base extract for the CASIM source code.
    =Defaults to "head".
    =
    =You may use FCM keywords (um10.2) or revision numbers (12345) here.
    =
    =The base extract source location is specified with env=casim_base.
ns=env/extract
pattern=(?i)^((um|vn)\d+\.\d+(\.\d+)?|\d+|head)$
sort-key=d3

[env=casim_sources]
compulsory=true
description=CASIM branches and/or working copies.
help=When extracting the CASIM source, merge in source code from the
    =locations and revisions listed here. These can be branches, working
    =copies or even the trunk. The merge is relative to the source code
    =specified by env=casim_base at the revision env=casim_rev.
    =
    =Complete FCM or Subversion URLs, or directory paths, may be used.
    =If only a partial path is provided this is taken to be relative to the
    =project tree associated with env=casim_project_location. For example,
    =if the project location is specified by the "fcm:casim.xm" keyword URL,
    =then
    =    branches/dev/user/um10.1_testing
    =is equivalent to
    =    fcm:casim.xm/branches/dev/user/um10.1_testing.
    =
    =If a complete URL is specified then when working with the shared
    =repository this must point to the local mirror of the repository,
    =not the shared repository itself.
    =
    =Use "@" to specify the revision of a repository location, e.g.
    =    branches/dev/user/um10.1_testing@67890.
    =If a revision is not provided for a repository-based location,
    ="head" is assumed.
    =
    =When providing a path to a working copy, the path must be visible to
    =the machine where the extract step takes place. If this is not the case,
    =prefix the path with the hostname of the machine where the working copy
    =is located, e.g.
    =    myhost:/data/local/user/um10.1_working_copy.
ns=env/extract
sort-key=d4
type=spaced_list

[env=cc]
compulsory=false
description=C compiler.
help=The name or full path to the C compiler.
ns=env/compilation
sort-key=a1

[env=ccflags]
compulsory=false
description=C compiler flags.
help=A space-separated list of C compiler flags.
    =
    =Setting this variable will replace any existing default flags.
ns=env/compilation
sort-key=a2

[env=compile_atmos]
compulsory=true
description=Compile atmosphere source.
help=Preprocess and build the atmosphere source code.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
ns=env/steps
sort-key=02a
trigger=env=recon_mpi: ;
value-titles=yes,no
values=preprocess-atmos build-atmos,

[env=compile_convpp]
compulsory=true
description=Compile convpp source.
help=Preprocess and build the convpp source code.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
ns=env/steps
sort-key=16a
value-titles=yes,no
values=preprocess-convpp build-convpp,

[env=compile_createbc]
compulsory=true
description=Compile CreateBC source.
help=Preprocess and build the CreateBC source code.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
ns=env/steps
sort-key=05a
value-titles=yes,no
values=preprocess-createbc build-createbc,

[env=compile_crmstyle_coarse_grid]
compulsory=true
description=Compile crmstyle_coarse_grid source.
help=Preprocess and build the crmstyle_coarse_grid source code.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
ns=env/steps
sort-key=17a
value-titles=yes,no
values=preprocess-crmstyle_coarse_grid build-crmstyle_coarse_grid,

[env=compile_fieldmod]
compulsory=true
description=Compile fieldmod source.
help=Preprocess and build the fieldmod source code.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
ns=env/steps
sort-key=15a
value-titles=yes,no
values=preprocess-fieldmod build-fieldmod,

[env=compile_pptoanc]
compulsory=true
description=Compile pptoanc source.
help=Preprocess and build the pptoanc source code.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
ns=env/steps
sort-key=13a
value-titles=yes,no
values=preprocess-pptoanc build-pptoanc,

[env=compile_recon]
compulsory=true
description=Compile reconfiguration source.
help=Preprocess and build the reconfiguration source code.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
ns=env/steps
sort-key=03a
value-titles=yes,no
values=preprocess-recon build-recon,

[env=compile_scm]
compulsory=true
description=Compile SCM source.
help=Preprocess and build the SCM source code.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
ns=env/steps
sort-key=04a
value-titles=yes,no
values=preprocess-scm build-scm,

[env=compile_sstpert_lib]
compulsory=true
description=Compile SST Perturbation Library.
help=Preprocess and build the UM SST-pert library source code.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
ns=env/steps
sort-key=05d
value-titles=yes,no
values=preprocess-sstpert_lib build-sstpert_lib,

[env=compile_vomext]
compulsory=true
description=Compile vomext source.
help=Preprocess and build the vomext source code.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
ns=env/steps
sort-key=10a
value-titles=yes,no
values=preprocess-vomext build-vomext,

[env=compile_wafccb_lib]
compulsory=true
description=Compile WAFC CB Library.
help=Preprocess and build the UM WAFC-CB library source code.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
ns=env/steps
sort-key=05e
value-titles=yes,no
values=preprocess-wafccb_lib build-wafccb_lib,

[env=config_revision]
compulsory=true
description=Config file revision.
help=The revision of the config file in the repository. This must start with "@",
    =e.g. @HEAD. You may use FCM keywords (@vn10.0) or revision numbers
    =(@12345) here.
    =
    =If using a config file in a working copy, leave this field blank.
    =
    =Leaving this field blank when not using a working copy is equivalent to
    =supplying @HEAD.
ns=env/config
pattern=(?i)^(|@(vn\d+\.\d+(\.\d+)?|\d+|head))$
sort-key=a4

[env=config_root_path]
compulsory=true
description=Path to the fcm-make configs directory.
help=Path to the UM's fcm-make directory, containing the build configs.
    =This can be an FCM or Subversion URL or a path to a working copy.
    =It should not include the fcm-make directory itself, e.g.
    =   fcm:um.xm/trunk
    =is a valid path.
    =
    =When working with the shared repository this must point to the
    =local mirror of the repository, not the shared repository itself.
    =
    =When providing a path to a working copy, the path must be visible to
    =the machine where the fcm_make task (NOT the fcm_make2 task, if
    =present) is run. If this is not the case, prefix the path with the
    =hostname of the machine where the working copy is located, e.g.
    =    myhost:/data/local/user/vn10.0_working_copy.
ns=env/config
sort-key=a3

[env=config_type]
compulsory=true
description=Type of executable(s).
help=An identifier for the type of executable(s) that you wish to build from
    =the UM source code. Available types are:
    =
    =    Atmosphere and/or reconfiguration executables.
    =    Single Column Model executable.
    =    CreateBC executable.
    =    Parallel UM utilities. Currently only um-crmstyle_coarse_grid.
    =    Serial UM utilities (except for CreateBC).
    =    UM standalone libraries.
    =
    =These choices correspond to the types of config file available in
    =the relevant env=platform_config_dir directory.
    =
    =The list of executables to preprocess and build can be adjusted by
    =choosing appropriate settings in the Make steps panel, or overridden
    =completely using env=steplist for builds on the local platform, or
    =env=mirror_steplist for builds on a remote platform.
    =
    =
    =BUILD NOTES:
    =
    =Builds including a linked repository (JULES, SOCRATES, CASIM):
    =
    =For builds that use a linked repository, the fcm_make app's
    =file/fcm-make.cfg file contains lines such as:
    =    extract.location{diff}[jules] =  $jules_sources
    =    extract.location{diff}[socrates] =  $socrates_sources
    =    extract.location{diff}[casim] =  $casim_sources
    =which are used to apply the linked repository source code changes
    =(in env=jules_sources, env=socrates_sources, env=casim_sources) to your
    =build. When present, these are typically the last lines in the file.
    =
    =When switching between builds that do or do not use linked repositories,
    =such as between an atmosphere and a small utility build, you may need to
    =add or remove these lines to your fcm-make.cfg file, as appropriate.
    =Failure to do so may result in either "name-spaces declared but not used"
    =errors, or the additional sources from the linked repositories not being
    =applied to the build.
    =
    =Serial reconfiguration:
    =
    =To build the serial reconfiguration you should:
    =
    =    - Set this switch to atmosphere/reconfiguration.
    =    - Set env=compile_atmos to no (and ensure e.g. the steplist is not
    =          being manually overridden).
    =    - Set env=recon_mpi to serial.
    =
    =If there is no particular need to generate a serial executable you may
    =find it simpler to run the standard (parallel) reconfiguration on one
    =processor, which should produce the same results.
ns=env/config
sort-key=a2
trigger=env=compile_atmos: atmos;
       =env=compile_recon: atmos;
       =env=compile_scm: scm;
       =env=compile_convpp: utils-serial;
       =env=compile_createbc: createbc;
       =env=compile_vomext: utils-serial;
       =env=compile_pptoanc: utils-serial;
       =env=compile_fieldmod: utils-serial;
       =env=compile_crmstyle_coarse_grid: utils-mpp;
       =env=compile_sstpert_lib: libs;
       =env=compile_wafccb_lib: libs;
       =env=DR_HOOK: this != "libs";
       =env=COUPLER: atmos;
       =env=stash_version: atmos, scm;
       =env=portio_version: this != "libs";
       =env=mpp_version: atmos, scm;
       =env=timer_version: atmos, createbc, scm;
       =env=solver_precision: atmos;
       =env=land_surface_model: atmos, scm;
       =env=recon_mpi: atmos;
       =env=keys_atmos: atmos;
       =env=keys_atmos_app: atmos;
       =env=keys_atmos_extra: atmos;
       =env=keys_recon: atmos;
       =env=keys_recon_app: atmos;
       =env=keys_recon_extra: atmos;
       =env=keys_scm: scm;
       =env=keys_scm_app: scm;
       =env=keys_scm_extra: scm;
       =env=ipa_path: atmos;
       =env=ATMOS_EXEC: atmos;
       =env=RECON_EXEC: atmos;
       =env=SCM_EXEC: scm;
       =env=jules_project_location: atmos, scm;
       =env=jules_base: atmos, scm;
       =env=jules_rev: atmos, scm;
       =env=jules_sources: atmos, scm;
       =env=socrates_project_location: atmos, scm;
       =env=socrates_base: atmos, scm;
       =env=socrates_rev: atmos, scm;
       =env=socrates_sources: atmos, scm;
       =env=casim_project_location: atmos, scm;
       =env=casim_base: atmos, scm;
       =env=casim_rev: atmos, scm;
       =env=casim_sources: atmos, scm;
value-titles=atmosphere/reconfiguration,single column model,CreateBC,parallel utilities,serial utilities, libraries
values=atmos,scm,createbc,utils-mpp,utils-serial,libs
widget[rose-config-edit]=rose.config_editor.valuewidget.radiobuttons.RadioButtonsValueWidget

[env=cpp]
compulsory=false
description=C preprocessor.
help=The name or full path to the C preprocessor.
ns=env/keys
sort-key=a1

[env=cppflags]
compulsory=false
description=C preprocessor flags.
help=A space-separated list of C preprocessor flags.
    =
    =Setting this variable will replace any existing default flags.
ns=env/keys
sort-key=a2

[env=external_modules]
compulsory=false
description=External Fortran module dependencies.
help=A list of Fortran module dependencies from external libraries.
    =
    =If your build includes changes to the source code that require new Fortran
    =modules from an external library, list those module dependencies here.
    =This instructs FCM not to search for those modules in the source code,
    =which would cause the build source analysis to fail with missing
    =dependencies.
ns=env/compilation
sort-key=c3
type=spaced_list

[env=extract]
compulsory=true
description=Extract the source code.
help=Extract source code from the selected locations.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
ns=env/steps
sort-key=01a
value-titles=yes,no
values=extract,

[env=fc]
compulsory=false
description=Fortran compiler.
help=The name or full path to the Fortran compiler.
ns=env/compilation
sort-key=b1

[env=fcflags_omp]
compulsory=false
description=Fortran OpenMP compiler flags.
help=A space-separated list of Fortran compiler flags specifically
    =intended for activating or deactivating OpenMP.
    =
    =When running without OpenMP this is typically left blank.
    =
    =Setting this variable will override the OpenMP setting at env=openmp
    =and replace any existing default flags.
ns=env/compilation
sort-key=d1

[env=fcflags_overrides]
compulsory=true
description=Fortran compiler overrides.
help=A space-separated list of Fortran compiler flags specifically
    =intended for overriding the default compilation flags.
    =
    =These flags are appended to the normal compilation settings and will
    =override any applicable existing settings.
    =
    =When using new modules from an external library, you may need to add those
    =modules to env=external_modules to prevent build failures.
    =
    =
    =Inter-variable dependencies:
    =
    =Variables defined in the [env] section of an app cannot refer to other
    =variables defined in the [env] section of that app (nor to variables
    =defined in the central fcm-make config files). If you want to refer to
    =an existing [env] variable (e.g. an include path) you must either expand
    =it in full wherever it is used, or you may use it directly in the
    =file/fcm-make.cfg file. Any variables defined using the latter method
    =must be defined before the include statement.
ns=env/compilation
sort-key=b3

[env=fcflags_prec]
compulsory=false
description=Fortran compiler flags for precision.
help=A space-separated list of Fortran compiler flags specifically
    =intended to set computational precision in memory.
    =
    =Setting this variable will replace any existing default flags.
ns=env/compilation
sort-key=b2

[env=flags_coupling]
compulsory=false
description=Compiler flags to include a coupling library.
help=A list of compiler flags to include a coupling library.
    =
    =By default these flags are passed to any Fortran compilation, Fortran
    =preprocessing, C compilation and C preprocessing steps. Use
    =env=ldflags_coupling to pass library flags for the coupler to the build.
    =
    =If this variable is set then these flags will be included in the build
    =regardless of the value of env=COUPLER. You may use env=prism_path
    =if you only need to change the path to an existing coupler.
ns=env/compilation
sort-key=e1
warn-if=this and env=COUPLER == 'none'; # Coupling flags will be included regardless of the value of COUPLER

[env=fpp]
compulsory=false
description=Fortran preprocessor.
help=The name or full path to the Fortran preprocessor.
ns=env/keys
sort-key=b1

[env=fppflags]
compulsory=false
description=Fortran preprocessor flags.
help=A space-separated list of Fortran preprocessor flags.
    =
    =Setting this variable will replace any existing default flags.
ns=env/keys
sort-key=b2

[env=gcom_path]
compulsory=false
description=GCOM library path.
help=The path to the GCOM library.
    =
    =Setting this variable will replace the existing default path.
    =
    =If you wish to use mpp and serial versions from a
    =new GCOM installation, in the same suite, then use
    =env=gcom_root_path instead.
    =
    =Setting this variable will replace the existing default GCOM library path.
    =If both this variable and env=gcom_root_path are present, this variable
    =takes precedence.
    =
    =If the new GCOM library was built with different OpenMP settings to the
    =default library then you may need to override the GCOM OpenMP library flags
    =env=ldgcom_omp.
ns=env/paths
sort-key=b1

[env=gcom_root_path]
compulsory=false
description=GCOM top-level installation path.
help=The path to the top level of a GCOM installation.
    =
    =This should be used to set the root installation directory of a
    =GCOM installation. When using multiple GCOM libraries
    =(e.g. mpp and serial libraries) the paths to the
    =individual libraries will be taken relative to this location.
    =
    =Setting this variable will replace the existing default root
    =installation path. If both this variable and env=gcom_path are present,
    =env=gcom_path takes precedence.
ns=env/paths
sort-key=b1

[env=grib_api_path]
compulsory=false
description=GRIB API installation path.
help=The path to the GRIB API installation, not including the include, lib,
    =etc. directories.
    =
    =Setting this variable will replace any existing default GRIB API path.
ns=env/paths
sort-key=c1

[env=ipa_path]
compulsory=false
description=Path to object files used for Inter-Procedural Analysis (IPA)
help=This is the path to previously compiled object files (e.g. .o, .mod files)
    =which are to be used by the compiler to perform Inter-Procedural Analysis (IPA)
    =optimisations (such as those from prebuilds).
    =
    =Only relevent to configs for which IPA optimisations are performed using files
    =from a previous build. Currently, this is only the meto-xc40-cce high configs.
ns=env/compilation
sort-key=g1

[env=jules_base]
compulsory=false
description=JULES base extract source.
help=The basename for the extract of the JULES source code, i.e. the
    =place in the JULES project tree to take the primary extract from,
    =such as the trunk or a branch. Defaults to "trunk".
    =
    =Unless a path to a Subversion repository is specified this is taken
    =to be relative to the location defined by env=jules_project_location.
    =
    =This is the source code against which your branches, working
    =copies etc. will be compared against and merged with prior to the
    =build. To build directly from a branch instead of merging changes
    =into the trunk, use e.g.
    =    branches/dev/user/um10.0_trunk_override.
    =
    =Use env=jules_rev to specify the revision of the base extract.
    =
    =Using an FCM keyword or Subversion URL here will override the value
    =of env=jules_project_location for the primary extract only (i.e. not
    =for any branches). If all your source code lies in a different
    =repository, modify that variable instead.
ns=env/extract
sort-key=b2

[env=jules_project_location]
compulsory=false
description=Location of the JULES project.
help=The location of the JULES project tree, in a Subversion repository.
    =This can be an FCM keyword, a Subversion URL or a file path.
    =Defaults to "fcm:jules.xm".
    =
    =When working with the shared repository this must point to the
    =local mirror of the repository, not the shared repository itself.
    =
    =Unless explicitly specified with a full path to a repository,
    =the values of env=jules_base and env=jules_sources are taken relative
    =to this location.
ns=env/extract
sort-key=b1

[env=jules_rev]
compulsory=true
description=JULES base extract revision.
help=The revision of the base extract for the JULES source code.
    =Defaults to "head".
    =
    =You may use FCM keywords (um10.0) or revision numbers (12345) here.
    =
    =The base extract source location is specified with env=jules_base.
ns=env/extract
pattern=(?i)^((um|vn)\d+\.\d+(\.\d+)?|\d+|head)$
sort-key=b3

[env=jules_sources]
compulsory=true
description=JULES branches and/or working copies.
help=When extracting the JULES source, merge in source code from the locations
    =and revisions listed here. These can be branches, working copies or even
    =the trunk. The merge is relative to the source code specified by
    =env=jules_base at the revision env=jules_rev.
    =
    =Complete FCM or Subversion URLs, or directory paths, may be used.
    =If only a partial path is provided this is taken to be relative to the
    =project tree associated with env=jules_project_location. For example, if
    =the project location is specified by the "fcm:jules.xm" keyword URL, then
    =    branches/dev/user/um10.0_testing
    =is equivalent to
    =    fcm:jules.xm/branches/dev/user/um10.0_testing.
    =
    =If a complete URL is specified then when working with the shared
    =repository this must point to the local mirror of the repository,
    =not the shared repository itself.
    =
    =Use "@" to specify the revision of a repository location, e.g.
    =    branches/dev/user/um10.0_testing@67890.
    =If a revision is not provided for a repository-based location,
    ="head" is assumed.
    =
    =When providing a path to a working copy, the path must be visible to
    =the machine where the extract step takes place. If this is not the case,
    =prefix the path with the hostname of the machine where the working copy
    =is located, e.g.
    =    myhost:/data/local/user/um10.0_working_copy.
ns=env/extract
sort-key=b4
type=spaced_list

[env=keys_atmos]
compulsory=false
description=All CPP keys for the atmosphere build.
help=A list of all CPP keys used to preprocess the atmosphere executable.
    =By default this is the sum of the two lists env=keys_platform and
    =env=keys_atmos_app. If provided, this supersedes both lists.
    =
    =Setting this variable will override ALL other CPP keys for an
    =atmosphere build, both application- and platform-specific.
    =This includes any additional keys added by env=keys_atmos_extra.
ns=env/keys
sort-key=d3
type=spaced_list

[env=keys_atmos_app]
compulsory=false
description=Scientific and technical keys for the atmosphere build.
help=A list of CPP keys used to preprocess the atmosphere executable.
    =These flags typically contain settings required by a particular
    =UM executable (e.g. flags for JULES or portio version) but not
    =tied to a given platform.
    =
    =Normally the switches on this page will construct this list for
    =you. Setting this variable will override all of these switches
    =for an atmosphere build, but platform-specific CPP keys hardwired
    =into the configs will still be included, as will any additional
    =keys provided by env=keys_atmos_extra.
ns=env/keys
sort-key=d1
type=spaced_list

[env=keys_atmos_extra]
compulsory=false
description=Additional CPP keys for the atmosphere build.
help=A list of additional CPP keys used to preprocess the atmosphere
    =executable. Anything given here will be added to the list of CPP
    =keys already in use.
ns=env/keys
sort-key=d2
type=spaced_list

[env=keys_platform]
compulsory=false
description=Platform-dependent keys for all builds.
help=A list of CPP keys specific to this platform. These keys are always
    =applied and rarely if ever change between builds.
    =
    =Setting this variable will override the list of platform-dependent
    =CPP keys provided by the UM configs. This new list will be combined
    =with any application-dependent choices made on this page, and with
    =the value of env=keys_platform_extra, if present.
ns=env/keys
sort-key=c1
type=spaced_list

[env=keys_platform_extra]
compulsory=false
description=Additional platform-dependent keys for all builds.
help=A list of additional CPP keys used to preprocess all executables
    =on this platform. Anything given here will be added to the list of
    =CPP keys already in use.
ns=env/keys
sort-key=c2
type=spaced_list

[env=keys_recon]
compulsory=false
description=All CPP keys for the reconfiguration build.
help=A list of all CPP keys used to preprocess the reconfiguration executable.
    =By default this is the sum of the two lists env=keys_platform and
    =env=keys_recon_app. If provided, this supersedes both lists.
    =
    =Setting this variable will override ALL other CPP keys for a
    =reconfiguration build, both application- and platform-specific.
    =This includes any additional keys added by env=keys_recon_extra.
ns=env/keys
sort-key=e3
type=spaced_list

[env=keys_recon_app]
compulsory=false
description=Scientific and technical keys for the reconfiguration build.
help=A list of CPP keys used to preprocess the reconfiguration executable.
    =These flags typically contain settings required by a particular
    =UM executable (e.g. flags for JULES or portio version) but not tied
    =to a given platform.
    =
    =Normally the switches on this page will construct this list for
    =you. Setting this variable will override all of these switches
    =for a reconfiguration build, but platform-specific CPP keys
    =hardwired into the configs will still be included, as will any
    =additional keys provided by env=keys_recon_extra.
ns=env/keys
sort-key=e1
type=spaced_list

[env=keys_recon_extra]
compulsory=false
description=Additional CPP keys for the reconfiguration build.
help=A list of additional CPP keys used to preprocess the reconfiguration
    =executable. Anything given here will be added to the list of CPP
    =keys already in use.
ns=env/keys
sort-key=e2
type=spaced_list

[env=keys_scm]
compulsory=false
description=All CPP keys for the SCM build.
help=A list of all CPP keys used to preprocess the SCM executable.
    =By default this is the sum of the two lists env=keys_platform and
    =env=keys_scm_app. If provided, this supersedes both lists.
    =
    =Setting this variable will override ALL other CPP keys for an SCM
    =build, both application- and platform-specific. This includes any
    =additional keys added by env=keys_scm_extra.
ns=env/keys
sort-key=f3
type=spaced_list

[env=keys_scm_app]
compulsory=false
description=Scientific and technical keys for the SCM build.
help=A list of CPP keys used to preprocess the SCM executable.
    =These flags typically contain settings required by a particular
    =UM executable (e.g. flags for the SCM or JULES) but not tied to
    =a given platform.
    =
    =Normally the switches on this page will construct this list for
    =you. Setting this variable will override all of these switches
    =for an SCM build, but platform-specific CPP keys hardwired into
    =the configs will still be included, as will any additional keys
    =provided by env=keys_scm_extra.
ns=env/keys
sort-key=f1
type=spaced_list

[env=keys_scm_extra]
compulsory=false
description=Additional CPP keys for the SCM build.
help=A list of additional CPP keys used to preprocess the SCM executable.
    =Anything given here will be added to the list of CPP keys already
    =in use.
ns=env/keys
sort-key=f2
type=spaced_list

[env=land_surface_model]
compulsory=true
description=Land surface model.
help=The name of the land surface model to be used with the UM.
    =JULES is currently the only such supported model; this option will cause
    =JULES code protected by the UM_JULES macro to be added to the UM source
    =code during preprocessing.
    =
    =When this option is active ensure that the file/fcm-make.cfg file contains
    =an extract.diff entry for JULES. See the Build Notes in env=config_type
    =for more details.
    =
    =Using another model will require modifications to the UM source code.
ns=env/keys
sort-key=g7
value-titles=JULES
values=jules

[env=ldflags_coupling]
compulsory=false
description=Library flags to include a coupling library.
help=A space-separated list of library flags to include a coupling library.
    =
    =Use env=flags_coupling to pass compiler flags for the coupler to the build.
    =
    =If this variable is set then these flags will be included in the build
    =regardless of the value of env=COUPLER. You may use env=prism_path
    =if you only need to change the path to an existing coupler.
ns=env/compilation
sort-key=e2
warn-if=this and env=COUPLER == 'none'; # Coupling flags will be included regardless of the value of COUPLER

[env=ldflags_omp]
compulsory=false
description=Fortran OpenMP library flags.
help=A space-separated list of Fortran compiler flags for linking in an
    =OpenMP library.
    =
    =When running without OpenMP this is typically left blank.
    =
    =Setting this variable will override the OpenMP setting at env=openmp
    =and replace any existing default flags.
ns=env/compilation
sort-key=d2

[env=ldflags_overrides_prefix]
compulsory=true
description=Fortran library flags to add as a prefix.
help=A space-separated list of Fortran library flags to add to the linker
    =options. These flags are added as a prefix to the existing argument list.
    =
    =Any linker options which must go at the beginning of the argument list,
    =such as paths to libraries that should come first in the search path,
    =should be applied using this option.
    =
    =Linker options that must go at the end of the argument list should be
    =applied with [env=ldflags_overrides_suffix]. Any entirely new libraries or
    =options without existing precedent may be applied with either variable.
    =
    =When using new modules from an external library, you may need to add those
    =modules to env=external_modules to prevent build failures.
    =
    =
    =Inter-variable dependencies:
    =
    =Variables defined in the [env] section of an app cannot refer to other
    =variables defined in the [env] section of that app (nor to variables
    =defined in the central fcm-make config files). If you want to refer to
    =an existing [env] variable (e.g. a library path) you must either expand it
    =in full wherever it is used, or you may use it directly in the
    =file/fcm-make.cfg file. Any variables defined using the latter method
    =must be defined before the include statement.
ns=env/compilation
sort-key=c1

[env=ldflags_overrides_suffix]
compulsory=true
description=Fortran library flags to add as a suffix.
help=A space-separated list of Fortran library flags to add to the linker
    =options. These flags are added as a suffix to the existing argument list.
    =
    =Any linker options which must go at the end of the argument list, such as
    =flags which are needed to override existing (default) flags, should be
    =applied using this option.
    =
    =Linker options that must go at the start of the argument list should be
    =applied with [env=ldflags_overrides_prefix]. Any entirely new libraries or
    =options without existing precedent may be applied with either variable.
    =
    =When using new modules from an external library, you may need to add those
    =modules to env=external_modules to prevent build failures.
    =
    =
    =Inter-variable dependencies:
    =
    =Variables defined in the [env] section of an app cannot refer to other
    =variables defined in the [env] section of that app (nor to variables
    =defined in the central fcm-make config files). If you want to refer to
    =an existing [env] variable (e.g. a library path) you must either expand it
    =in full wherever it is used, or you may use it directly in the
    =file/fcm-make.cfg file. Any variables defined using the latter method
    =must be defined before the include statement.
ns=env/compilation
sort-key=c2

[env=ldflags_shumlib]
compulsory=false
description=Library flags to include one or more Shumlib libraries.
help=Shumlib provides several modular libraries (some of which may have
    =dependencies on others).  Each required library must be named via the
    ="-l" flag (space separated).  The build configs should set this
    =appropriately but it can be overidden here if desired (for example as part
    =of developing a new Shumlib library).
    =
    =Note that when building the libraries (env=config_type set to "libs")
    =this flag does not act as an override, and instead adds additional
    =flags (to the set hard coded in the common libs configuration file).
ns=env/compilation
sort-key=e3

[env=ldgcom_omp]
compulsory=false
description=Fortran OpenMP library flags for GCOM.
help=A space-separated list of Fortran compiler flags for linking OpenMP into
    =the GCOM library.
    =
    =If GCOM has been compiled with OpenMP then the OpenMP library must be
    =linked in to the UM executable, even if the UM itself was compiled without
    =OpenMP.
    =
    =By default the UM fcm-make configuration files will resolve this
    =dependency automatically, but if you use a GCOM library (specifying
    =env=gcom_path or env=gcom_root_path) with different OpenMP settings you
    =may need to specify the GCOM OpenMP library flags manually.
    =
    =If the custom library uses OpenMP, provide the relevant library flags here.
    =If the custom library does not use OpenMP, you may omit this variable
    =or leave it blank.
ns=env/compilation
sort-key=d3

[env=lib_root_path]
compulsory=false
description=Library root path.
help=The path to the directory containing the libraries for a given
    =value of env=platform_config_dir.
    =
    =Setting any individual path, such as env=shumlib_path or
    =env=gcom_path, will override this setting for that library.
ns=env/paths
sort-key=a0

[env=libm_path]
compulsory=false
description=libm library path.
help=The path to a suitable libm mathematics library object.
    =
    =Setting this variable will replace any existing default libm path.
ns=env/paths
sort-key=f1

[env=ls_precipitation_precision]
compulsory=true
description=Large scale precipitation physics scheme precision.
help=Controls the precision of the large scale precipitation physics scheme.
    =
    =double: 'Normal' precision (64-bit)
    =
    =single: Single precision (32-bit). For compatibility reasons this forces
    =the scheme to use the new qsat. It also sets some compiler directives to
    =work around a compiler bug on the Cray compiler for power calculations
    =at 32-bit. For good performance, retune the relevant segment size in the
    =UM apps.
ns=env/keys
sort-key=g8
values=double,single

[env=lustre_path]
compulsory=false
description=Lustre API installation path.
help=The path to the lustre API installation, not including the include, lib,
    =etc. directories.
    =
    =Setting this variable will replace any existing default Lustre API path.
ns=env/paths
sort-key=e1

[env=mirror]
compulsory=true
description=Mirror extracted source code.
help=Mirror the extracted source code to a remote platform.
    =The mirror target is the host of the corresponding fcm_make2 task.
    =
    =If provided, env=steplist and/or env=mirror_steplist will override
    =individual make step settings.
    =
    =
    =Mirroring FCM configuration files:
    =
    =In addition to mirroring the source code, the mirror step also transfers
    =the FCM config files that contain the preprocess and build instructions
    =to the remote platform. These config files are generated by the fcm_make
    =task and then used by the corresponding fcm_make2 task.
    =
    =If you edit the list of preprocess or build steps for a remote platform
    =you must also include the mirror step so that the updated config files are
    =transferred across, even if no extract is required. Failure to do so would
    =result in no update of the FCM config files on the remote platform, and
    =the revised preprocess and build list would not take effect.
ns=env/steps
sort-key=01b
value-titles=yes,no
values=mirror,

[env=mirror_steplist]
compulsory=false
description=Steplist for the remote platform.
help=A space-separated list of compile steps to perform on the remote
    =platform. These are performed after the code has been extracted on the
    =local platform and mirrored to the remote platform.
    =
    =This should be a list of preprocess-* and build-* instructions for the
    =executable(s) being compiled. For example, when compiling both the
    =reconfiguration and atmosphere executables this is set to:
    =
    =    preprocess-atmos build-atmos preprocess-recon build-recon
    =
    =In this case compilation of the reconfiguration can be disabled by
    =providing this variable without the two *-recon steps.
    =
    =If this is a two-platform build, setting this variable will override all
    =of the compile_[exec] settings on the Make steps panel. It will have no
    =effect on single-platform builds.
ns=env/steps
sort-key=00b
type=spaced_list

[env=mkl]
compulsory=false
description=Compile with Intel Math Kernel Library (MKL)
help=Choose whether to use the Intel Math Kernel library for specific
    =math routines (ATAN2 and ASIN). Setting this to "on" will apply
    =the MKL compiler and library flags and the MKL preprocessor macro
    =to the build.
    =
    =Since the MKL routines have different precision (it is expected a
    =difference around 14th decimal place) the results of a model run
    =is going to be different.
ns=env/build
sort-key=a6
value-titles=on,off,defined by suite
values=true,false,$MKL

[env=mpp_version]
compulsory=true
description=MPP version, C96.
help=The version of the MPP routines (C96) to be built into the model.
    =Applying this C preprocessor macro will cause the MPP routines
    =protected by the C96 macro to be compiled into the executable(s).
    =Only one version of the MPP routines are available, 1C.
ns=env/keys
sort-key=g4
values=1C

[env=netcdf_inc_path]
compulsory=false
description=NetCDF include files path.
help=The path to the include files of a NetCDF installation.
    =
    =Setting this variable will replace any existing default path. It will
    =also override the path specified by env=netcdf_path for using NetCDF
    =include files. If both variables are provided this path takes precedence.
ns=env/paths
#trigger = env=netcdf_path: ;
sort-key=a3

[env=netcdf_lib_path]
compulsory=false
description=NetCDF library files path.
help=The path to the library files of a NetCDF installation.
    =
    =Setting this variable will replace any existing default path. It will
    =also override the path specified by env=netcdf_path for using NetCDF
    =library files. If both variables are provided this path takes precedence.
ns=env/paths
#trigger = env=netcdf_path: ;
sort-key=a4

[env=netcdf_path]
compulsory=false
description=NetCDF installation root path.
help=The path to the top level of the NetCDF installation.
    =The relative paths to the include and library files are defined
    =in the relevant compiler configuration file, e.g.
    =    fcm-make/meto-pwr7-xlf/inc/pwr7-*.cfg
    =Using this variable assumes these relative paths are correct.
    =
    =In some cases the relative paths may differ between NetCDF installations,
    =for example when changing from an installation which uses
    =    $netcdf_path/include
    =to another installation which uses
    =    $netcdf_path/inc
    =
    =If you need to specify either of these paths in full, use
    =env=netcdf_inc_path and env=netcdf_lib_path instead.
    =Those variables will override the path to either the include or library
    =files defined here, as appropriate.
ns=env/paths
sort-key=a2

[env=openmp]
compulsory=true
description=Compile with OpenMP.
help=Choose whether to apply OpenMP compiler and library flags to the build.
    =These flags are specfied in the configuration files in the UM's
    =fcm-make/[platform]/inc directory and are local to each platform.
    =
    =Use the option "defined by suite" to pass the variable $OPENMP down from
    =the suite, which allows the same fcm_make app to be used for both OpenMP
    =and no-OpenMP builds. This variable should be set to either on
    =for OpenMP builds, or off for no-OpenMP builds.
    =
    =OpenMP settings can be overridden using the compiler (env=fcflags_omp) and
    =library (env=ldflags_omp) OpenMP flags, which supersede this switch.
    =
    =The SCM cannot currently be built with OpenMP on most platforms.
    =
    =This setting does not affect the GCOM OpenMP library flags, env=ldgcom_omp.
ns=env/build
sort-key=a2
value-titles=on,off,defined by suite
values=true,false,$OPENMP
warn-if=this == 'true' and env=config_type == 'scm'; # SCM may not compile with OpenMP on some platforms

[env=optimisation_level]
compulsory=true
description=Optimisation level for builds.
fail-if=this == 'fast' and env=config_type != atmos # Fast only available for atmos.
       =this == 'fast' and env=platform_config_dir != meto-xc40-cce # Fast only available for MO XC40 and Monsoon CCE builds.
help=Compiler optimisation level; this chooses one of several
    =pre-selected sets of optimisation options that determine how much
    =automatic optimisation the compiler is allowed to do. The available
    =choices are:
    =
    =    Fast  -  Maximum optimisation allowed for Met Office Cray XC40
    =             and Monsoon CCE compiles. Maximises performance with
    =             the cost of bit-reproducibility loss across different
    =             processor decompositions. Typically for NWP
    =             and operational suites.
    =    High  -  Maximum setting for most platforms/sites. Generally expected
    =             to maintain bit-reproducibility across different processor
    =             decompositions.
    =    Safe  -  Moderate level of optimisation, typically for climate
    =                suites.
    =    Debug  -  No automatic optimisation.
    =    Rigorous  -  No automatic optimisation and additional compiler
    =                       checking options.
    =
    =    Defined by suite - the environment variable $OPTIMISATION is set in
    =        the suite which contains one of the above four options.
    =
    =Increasing the optimisation level generally results in a faster executable,
    =at the cost of increasing the risk of loss of bit-comparison. The lowest
    =optimisation settings are typically used to debug problematic code.
    =
    =When using a prebuild the env=prebuild setting should point to a build at
    =the same optimisation level as is set here, where possible.
ns=env/build
sort-key=a1
trigger=env=ipa_path: high, fast;
value-titles=fast (MO XC40 & Monsoon CCE only),high,safe,debug,rigorous,defined by suite
values=fast,high,safe,debug,rigorous,$OPTIMISATION

[env=platform_config_dir]
compulsory=true
description=Platform configs directory.
help=Name of a directory containing site- and platform-specific
    =configuration files. This should be a sub-directory of the fcm-make
    =directory in the UM source code.
    =
    =Only one configuration directory at a time should be selected.
    =
    =This may be an environment variable $PLATFORM which should be defined
    =by the suite.
ns=env/config
sort-key=a1
trigger=env=mirror: 'meto-' not in this and this != 'uoe-x86-ifort' and this != 'uoe-postzen-ifort' and this != 'uoe-postzen-gnu' and this != 'vm-x86-gnu';
       =env=mirror_steplist: 'meto-' not in this and this != 'uoe-x86-ifort' and this != 'uoe-postzen-ifort' and this != 'uoe-postzen-gnu' and this != 'vm-x86-gnu';
       =env=ipa_path: meto-xc40-cce;
       =env=libm_path: 'meto-x86-' in this;
       =env=lib_root_path: 'meto-' in this;
widget[rose-config-edit]=rose.config_editor.valuewidget.choice.ChoicesValueWidget
                        =--editable
                        =afw-hp-ifort
                        =ecmwf-xc30-cce
                        =ecmwf-xc30-ifort
                        =icm-pwr7-xlf
                        =icm-xc40-cce
                        =kma-xc40-cce
                        =kma-xc40-ifort
                        =meto-x86-clang-ifort
                        =meto-x86-ifort
                        =meto-xc40-cce
                        =meto-xc40-gnu
                        =meto-xc40-ifort
                        =mss-xc30-cce
                        =mss-xc30-gnu
                        =mss-xc30-ifort
                        =ncas-xc30-cce
                        =ncas-xc30-ifort
                        =nci-x86-ifort
                        =ncm-ibm-ifort
                        =niwa-xc50-cce
                        =niwa-xc50-ifort
                        =saws-xc30-cce
                        =saws-xc30-ifort
                        =uoe-dirac-ifort
                        =uoe-isca-ifort
                        =uoe-x86-gnu
                        =uoe-x86-ifort
                        =vm-x86-gnu
                        =$PLATFORM

[env=portio_version]
compulsory=true
description=Portio version, C95.
help=The version of the "portio" C-layer I/O interface (C95) to be built into
    =the model. The chosen C preprocessor macro will determine which version
    =of the I/O routines are built into the executable(s).
ns=env/keys
sort-key=g3
values=2A,2B

[env=prebuild]
compulsory=true
description=Prebuild location.
help=The location of an existing UM build. This should be the full path
    =to the fcm_make* (task name) directory on the local platform.
    =
    =A space-separated list of prebuilds is also accepted; the order of
    =precedence for target files is from right-to-left.
    =
    =When using a prebuild the new build will inherit object files,
    =module interface files etc. from the prebuild wherever possible,
    =only preprocessing and compiling files that differ between the two.
    =Choosing a suitable prebuild can therefore greatly reduce the
    =overall build time.
ns=env/build
sort-key=a3
type=spaced_list

[env=prism_path]
compulsory=false
description=PRISM library path.
help=The path to the PRISM library, used for coupling with OASIS.
    =
    =Setting this variable will replace any existing default path.
ns=env/paths
sort-key=d1

[env=recon_mpi]
compulsory=true
description=Reconfiguration MPI parallelism.
help=Determines whether a parallel (MPI) or serial reconfiguration executable
    =is compiled. Setting this to serial will add the RECON_SERIAL macro to
    =the C preprocessor keys for the reconfiguration, and force the
    =reconfiguration executable to be compiled using that site's serial
    =configuration settings. A serial executable can still be compiled with
    =OpenMP.
    =
    =Please see the Build Notes in the help for env=config_type for more
    =details. At most sites, running a parallel reconfiguration executable
    =on one processor should produce the same results as the serial
    =reconfiguration.
    =
    =You cannot compile atmosphere and serial reconfiguration executables in
    =the same fcm-make task.
ns=env/build
sort-key=b1
values=parallel,serial

[env=shumlib_path]
compulsory=false
description=Shumlib top-level installation path.
help=The path containing Shumlib (Shared UM Library); this should be set to the
    =directory containing dual "openmp" and "no-openmp" subdirectories giving
    =variants of Shumlib built with and without OpenMP respectively (consult
    =UMDP-X04 for further details of how Shumlib should be installed/configured).
ns=env/paths
sort-key=a1

[env=socrates_base]
compulsory=false
description=SOCRATES base extract source.
help=The basename for the extract of the SOCRATES source code, i.e. the
    =place in the SOCRATES project tree to take the primary extract from,
    =such as the trunk or a branch. Defaults to "trunk".
    =
    =Unless a path to a Subversion repository is specified this is taken
    =to be relative to the location defined by env=socrates_project_location.
    =
    =This is the source code against which your branches, working
    =copies etc. will be compared against and merged with prior to the
    =build. To build directly from a branch instead of merging changes
    =into the trunk, use e.g.
    =    branches/dev/user/um10.1_trunk_override.
    =
    =Use env=socrates_rev to specify the revision of the base extract.
    =
    =Using an FCM keyword or Subversion URL here will override the value
    =of env=socrates_project_location for the primary extract only (i.e. not
    =for any branches). If all your source code lies in a different
    =repository, modify that variable instead.
ns=env/extract
sort-key=c2

[env=socrates_project_location]
compulsory=false
description=Location of the SOCRATES project.
help=The location of the SOCRATES project tree, in a Subversion repository.
    =This can be an FCM keyword, a Subversion URL or a file path.
    =Defaults to "fcm:socrates.xm".
    =
    =When working with the shared repository this must point to the
    =local mirror of the repository, not the shared repository itself.
    =
    =Unless explicitly specified with a full path to a repository,
    =the values of env=socrates_base and env=socrates_sources are taken
    =relative to this location.
ns=env/extract
sort-key=c1

[env=socrates_rev]
compulsory=true
description=SOCRATES base extract revision.
help=The revision of the base extract for the SOCRATES source code.
    =Defaults to "head".
    =
    =You may use FCM keywords (um10.2) or revision numbers (12345) here.
    =
    =The base extract source location is specified with env=socrates_base.
ns=env/extract
pattern=(?i)^((um|vn)\d+\.\d+(\.\d+)?|\d+|head)$
sort-key=c3

[env=socrates_sources]
compulsory=true
description=SOCRATES branches and/or working copies.
help=When extracting the SOCRATES source, merge in source code from the
    =locations and revisions listed here. These can be branches, working
    =copies or even the trunk. The merge is relative to the source code
    =specified by env=socrates_base at the revision env=socrates_rev.
    =
    =Complete FCM or Subversion URLs, or directory paths, may be used.
    =If only a partial path is provided this is taken to be relative to the
    =project tree associated with env=socrates_project_location. For example,
    =if the project location is specified by the "fcm:socrates.xm" keyword URL,
    =then
    =    branches/dev/user/um10.1_testing
    =is equivalent to
    =    fcm:socrates.xm/branches/dev/user/um10.1_testing.
    =
    =If a complete URL is specified then when working with the shared
    =repository this must point to the local mirror of the repository,
    =not the shared repository itself.
    =
    =Use "@" to specify the revision of a repository location, e.g.
    =    branches/dev/user/um10.1_testing@67890.
    =If a revision is not provided for a repository-based location,
    ="head" is assumed.
    =
    =When providing a path to a working copy, the path must be visible to
    =the machine where the extract step takes place. If this is not the case,
    =prefix the path with the hostname of the machine where the working copy
    =is located, e.g.
    =    myhost:/data/local/user/um10.1_working_copy.
ns=env/extract
sort-key=c4
type=spaced_list

[env=solver_precision]
compulsory=true
description=ENDGame fast solver precision.
help=Controls the precision of the Helmholtz solver for
    =ENDGame. This macro should be set according to the intended choice for the
    =namelist item global_sum_method at runtime.
    =
    =double: Any of the "Old reproducible", "Double-double precision
    =reproducible" or "Fast non-reproducible" methods may be used with ENDGame.
    =This option adds the C_DP_HLM macro to the C preprocessor keys.
    =
    =single: Only the "Fast non-reproducible" and "Double-double precision"
    =methods may be used with ENDGame and the code will abort if the
    ="Old reproducible" method is used. The solver will use single-precision
    =values to improve cache utilisation and calculation speed. This is only
    =appropriate for moderate solver tolerances and the code will abort if
    =a tolerance finer than 10^-5 is used. (No additional macro is applied.)
    =
    =If the New Dynamics dynamical core is selected at runtime then the value
    =of this macro will be ignored.
ns=env/keys
sort-key=g6
values=double,single

[env=stash_version]
compulsory=true
description=STASH version, C84.
help=The version of the STASH system (C84) to be built into the model.
    =Only one version of the STASH routines are available, 1A.
    =Applying this C preprocessor macro will cause the STASH routines
    =protected by the C84 macro to be compiled into the executable(s).
ns=env/keys
sort-key=g2
values=1A

[env=steplist]
compulsory=false
description=Steplist for the local platform.
help=A space-separated list of compile steps to perform on the local
    =platform.
    =
    =For a single-platform build this is normally all the steps
    =required to compile an executable. For example, when compiling both the
    =reconfiguration and atmosphere executables this is set to:
    =
    =    extract preprocess-atmos build-atmos preprocess-recon build-recon
    =
    =In this case compilation of the reconfiguration can be disabled by
    =providing this variable without the two *-recon steps.
    =
    =For a two-platform build this normally consists only of extract and mirror
    =steps:
    =
    =    extract mirror
    =
    =In this case rebuilding an executable without re-extracting the code
    =could be achieved by removing the extract step.
    =
    =Setting this variable will override the env=extract and env=mirror
    =settings; if this is a two-platform build it will also override all of the
    =compile_[exec] settings on the Make steps panel.
    =
    =
    =Mirroring FCM configuration files:
    =
    =In addition to mirroring the source code, the mirror step also transfers
    =the FCM config files that contain the preprocess and build instructions
    =to the remote platform. These config files are generated by the fcm_make
    =task and then used by the corresponding fcm_make2 task.
    =
    =If you edit the list of preprocess or build steps for a remote platform
    =you must also include the mirror step so that the updated config files are
    =transferred across, even if no extract is required. Failure to do so would
    =result in no update of the FCM config files on the remote platform, and
    =the revised preprocess and build list would not take effect.
ns=env/steps
sort-key=00a
type=spaced_list

[env=timer_version]
compulsory=true
description=Timer version, C97.
fail-if=this == "1A" and env=config_type == "atmos"; # 1A timer is only for use with serial executables
       =this == "1A" and env=config_type == "scm"; # 1A timer is only for use with serial executables
help=The version of the Timer routines (C97) to be built into the model.
    =Applying one of these C preprocessor macros will cause the UM's inbuilt
    =timer routines to be compiled into the executable(s).
    =
    =1A: A legacy version of timer that only works with serial executables
    =and provides information for individual routines.
    =
    =3A: This version of timer works with any type of executable and provides
    =timing information for both individual routines and larger code sections,
    =such as dynamics or physics. It also includes time taken by the timer
    =itself. It is computationally more expensive than the 1A timer.
    =
    =4A: A dummy timer routine that should be included when timer output is
    =not required.
ns=env/keys
sort-key=g5
value-titles=1A (serial only),3A (recommended),4A (dummy)
values=1A,3A,4A

[env=um_base]
compulsory=false
description=UM base extract source.
help=The basename for the extract of the UM source code, i.e. the place
    =in the UM project tree to take the primary extract from, such as
    =the trunk or a branch. Defaults to "trunk".
    =
    =Unless a path to a Subversion repository is specified this is taken
    =to be relative to the location defined by env=um_project_location.
    =
    =This is the source code against which your branches, working
    =copies etc. will be compared against and merged with prior to the
    =build. To build directly from a branch instead of merging changes
    =into the trunk, use e.g.
    =    branches/dev/user/vn10.0_trunk_override.
    =
    =Use env=um_rev to specify the revision of the base extract.
    =
    =Using an FCM keyword or Subversion URL here will override the value
    =of env=um_project_location for the primary extract only (i.e. not
    =for any branches). If all your source code lies in a different
    =repository, modify that variable instead.
ns=env/extract
sort-key=a2

[env=um_project_location]
compulsory=false
description=Location of the UM project.
help=The location of the UM project tree, in a Subversion repository.
    =This can be an FCM keyword, a Subversion URL or a file path.
    =Defaults to "fcm:um.xm".
    =
    =When working with the shared repository this must point to the
    =local mirror of the repository, not the shared repository itself.
    =
    =Unless explicitly specified with a full path to a repository,
    =the values of env=um_base and env=um_sources are taken relative
    =to this location.
ns=env/extract
sort-key=a1

[env=um_rev]
compulsory=true
description=UM base extract revision.
help=The revision of the base extract for the UM source code.
    =Defaults to "head".
    =
    =You may use FCM keywords (vn10.0) or revision numbers (12345) here.
    =
    =The base extract source location is specified with env=um_base.
ns=env/extract
pattern=(?i)^(vn\d+\.\d+(\.\d+)?|\d+|head)$
sort-key=a3

[env=um_sources]
compulsory=true
description=UM branches and/or working copies.
help=When extracting the UM source, merge in source code from the locations
    =and revisions listed here. These can be branches, working copies or even
    =the trunk. The merge is relative to the source code specified by
    =env=um_base at the revision env=um_rev.
    =
    =Complete FCM or Subversion URLs, or directory paths, may be used.
    =If only a partial path is provided this is taken to be relative to
    =the project tree associated with env=um_project_location. For example,
    =if the project location is specified by the "fcm:um.xm" keyword URL, then
    =    branches/dev/user/vn10.0_testing
    =is equivalent to
    =    fcm:um.xm/branches/dev/user/vn10.0_testing.
    =
    =If a complete URL is specified then when working with the shared
    =repository this must point to the local mirror of the repository,
    =not the shared repository itself.
    =
    =Use "@" to specify the revision of a repository location, e.g.
    =    branches/dev/user/vn10.0_testing@12345.
    =If a revision is not provided for a repository-based location,
    ="head" is assumed.
    =
    =When providing a path to a working copy, the path must be visible to
    =the machine where the extract step takes place. If this is not the case,
    =prefix the path with the hostname of the machine where the working copy
    =is located, e.g.
    =    myhost:/data/local/user/vn10.0_working_copy.
ns=env/extract
sort-key=a4
type=spaced_list
