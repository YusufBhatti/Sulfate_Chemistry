include-path = $HERE/inc $HERE/../inc

$extract{?} = extract

$fcflags_level = -O0 -Ovector0 -hfp0 -hflex_mp=intolerant -e CID

# Override SHUMLib path here specifically so SERIAL Recon gets the right library
$lib_root_path{?} = /projects/um1/lib/cce-8.3.4
$shumlib_path{?} = $lib_root_path/shumlib/shumlib-2018.06.1/haswell

include = um-atmos-common.cfg

# add debug symbols to C code
$ccflags = $ccflags -g

# We apply additional compile-time checking flags (-hconform -hstdc -hnognu)
# here because this rigourous build is included in the developer + utils &
# nightly rose-stem group combinations.
# This ensures full testing is covered by these groups.
preprocess.prop{class,cpp.flags} = $cppflags -hconform -hstdc -hnognu
build.prop{class,cc.flags} = $ccflags -hconform -hstdc -hnognu

# c_affinity.c is Linux specific, and so includes GNU extensions
build-atmos.prop{cc.flags}[um/src/control/c_code/c_affinity.c]    = $ccflags -hnoconform -hnostdc -hgnu
build-recon.prop{cc.flags}[um/src/control/c_code/c_affinity.c]    = $ccflags -hnoconform -hnostdc -hgnu

# The lustre header files contain GNU-isms
preprocess-recon.prop{cpp.flags}[um/src/control/c_code/c_io_lustreapi.c]    = $cppflags -hnoconform -hnostdc -hgnu
preprocess-atmos.prop{cpp.flags}[um/src/control/c_code/c_io_lustreapi.c]    = $cppflags -hnoconform -hnostdc -hgnu
build-recon.prop{cc.flags}[um/src/control/c_code/c_io_lustreapi.c]    = $ccflags -hnoconform -hnostdc -hgnu
build-atmos.prop{cc.flags}[um/src/control/c_code/c_io_lustreapi.c]    = $ccflags -hnoconform -hnostdc -hgnu
