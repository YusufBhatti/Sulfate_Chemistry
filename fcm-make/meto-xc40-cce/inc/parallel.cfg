# When modifying the meto keys_platform variable, ensure the no-GRIB optional
# configuration file in the fcm_make_recon app is also updated.
$keys_platform{?} = C_LONG_INT=c_long_int C_LOW_U=c_low_u FRL8=frl8 \
                  \ LINUX=linux BUFRD_IO=bufrd_io \
                  \ GRIB_API=grib_api \
                  \ CRAY_FORTRAN=8003004 GNU_LIBC=2011003 \
                  \ MPL_WTIME=mpl_wtime

include = external_paths.cfg
$gcom_path{?} = $gcom_mpp_path

# Non-empty OpenMP and Dr Hook settings:
$fcflags_drhook_on{?} = -I$drhook_path/include
$ldflags_drhook_on{?} = -L$drhook_path/lib -ldrhook -h omp
$fcflags_omp_off{?} = -h noomp
$ldflags_omp_off{?} = -h noomp
$ccflags_omp_off{?} = -h noomp
$fcflags_omp_on{?}  = -h omp
$ldflags_omp_on{?}  = -h omp
$ccflags_omp_on{?}  = -h omp

# MKL: see https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor
$fcflags_mkl_on{?}  = -I$mkl_path/include
$ldflags_mkl_on{?}  = -L$mkl_path/lib/intel64 -Wl,--start-group -lmkl_intel_ilp64 -lmkl_sequential -lmkl_core -Wl,--end-group
# Use only specific MKL math routines
$cppflags_mkl_on{?} =  MKL_ATAN2_V=mkl_atan2_v  MKL_ASIN_V=mkl_asin_v

# GCOM OpenMP settings.
# Leave blank when the specified GCOM library does not use OpenMP.
$ldgcom_omp{?} = -h omp

# Set user options, with defaults:
$openmp{?} = true
$DR_HOOK{?} = false
$mkl{?} = false

include = options/common.cfg

$fcflags_prec{?} = -s default64

$fcflags_common = $fcflags_prec                        \
                \ -e m -J ./include                    \
                \ -I$gcom_path/include                 \
                \ -I$grib_api_path/include             \
                \ -I$shumlib_path/$openmp_path/include 

$flags_coupling{?} = -I$prism_path/build/lib/psmile.MPI1
$fcflags_coupling{?} = $flags_coupling
$fppflags_coupling{?} = $flags_coupling
$ccflags_coupling{?} = $flags_coupling
$cppflags_coupling{?} = $flags_coupling

$ldflags_coupling{?} = -L$prism_path/lib \
                     \ -lpsmile.MPI1 \
                     \ -lscrip

$ldflags_lustre{?} = -L$lustre_path/lib64/ -llustreapi
$cppflags_lustre{?} = -I$lustre_path/include/   \
                    \ -DHAVE_UMODE_T            \
                    \ -DHAVE___S8  -DHAVE___U8  \
                    \ -DHAVE___S16 -DHAVE___U16 \
                    \ -DHAVE___S32 -DHAVE___U32 \
                    \ -DHAVE___S64 -DHAVE___U64

# The ccflags and cppflags below are applied to all builds. Some additional
# flags are applied to certain builds, as follows:
#
# -hstd=c99 is desirable, but can only be added to
# builds using CCE 8.4 and above, as it not supported by CCE <=8.3.
# It is therefore additionally applied in the builds which use CCE 8.4 -
# namely CreateBC, libs and utils builds.
#
# In addition to this there are some flags which are applied only to
# selected builds in order to reduce complexity of the configs and the number of
# overrides required. These flags (-hconform -hstdc -hnognu) are only applied to
# the rigorous builds, plus libs and utils builds.
#
# These combinations are chosen to cover all builds in the developer + utils
# or the nightly rose-stem groups.

$cpp{?} = cc
$cppflags{?} = -E -C $cppflags_lustre -hc99  \
               -hnotolerant -herror_on_warning $ccflags_omp

$fpp{?} = cpp
$fppflags{?} = -E -P

$cc{?} = cc
$ccflags{?} = -O3 -hc99 -hnotolerant     \
              -herror_on_warning $ccflags_omp

$fc{?} = ftn
$ldflags_overrides_prefix{?} =
$ldflags_overrides_suffix{?} =
$ldflags{?} = $ldflags_overrides_prefix \
             \ $ldflags_omp $ldflags_drhook $ldflags_mkl \
             \ -L$gcom_path/lib -lgcom $ldgcom_omp \
             \ -L$grib_api_path/lib -lgrib_api_f90 -lgrib_api \
             \ -L$shumlib_path/$openmp_path/lib \
             \ $ldflags_shumlib \
             \ $ldflags_lustre $ldflags_overrides_suffix

# Needed to work with the -e m option:
build.prop{class,file-name-option.f90-mod} = case=upper
