include-path = $HERE/inc $HERE/../inc

$extract{?} = extract

$fcflags_level = -O0 -Ovector0 -hfp0 -hflex_mp=intolerant -e CIDi

include = external_paths.cfg

$ldflags_drhook_on{?} = -L$drhook_path/lib -ldrhook -lmpi_serial -h omp

include = um-createbc-common.cfg

# add debug symbols to C code
$ccflags = $ccflags -g

# We apply additional compile-time checking flags (-hconform -hstdc -hnognu)
# here because this rigourous build is included in the developer + utils &
# nightly rose-stem group combinations. This ensures full testing is covered by
# these groups.
#
# Additionally, CreateBC already requires CCE 8.4, so can have the -hstd=c99
# flag too.
preprocess.prop{class,cpp.flags} = $cppflags -hstd=c99 -hconform -hstdc -hnognu
build.prop{class,cc.flags} = $ccflags -hstd=c99 -hconform -hstdc -hnognu

# c_affinity.c is Linux specific, and so includes GNU extensions
build-createbc.prop{cc.flags}[um/src/control/c_code/c_affinity.c]    = $ccflags -hnoconform -hnostdc -hgnu
build-createbc.prop{cc.flags}[um/src/control/c_code/c_affinity.c]    = $ccflags -hnoconform -hnostdc -hgnu

# More GNU extensions:
build-createbc.prop{cc.flags}[um/src/control/c_code/exceptions/exceptions.c]    = $ccflags -hnoconform -hnostdc -hgnu
build-createbc.prop{cc.flags}[um/src/control/c_code/exceptions/exceptions-platform/exceptions-linux.c]    = $ccflags -hnoconform -hnostdc -hgnu
build-createbc.prop{cc.flags}[um/src/control/c_code/exceptions/exceptions-platform/exceptions-generic.c]    = $ccflags -hnoconform -hnostdc -hgnu

# Remove error_on_warning flag to avoid failure due to warning about degradation of IPA optimisation
build-createbc.prop{cc.flags}[um/src/control/c_code/pio_byteswap.c] = -O3 -hc99 -hnotolerant -h noomp -g
