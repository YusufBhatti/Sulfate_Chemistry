$compile_scm{?} = preprocess-scm build-scm

step.class[preprocess-scm] = preprocess
step.class[build-scm]      = build
$steplist{?} = $extract $compile_scm

steps = $steplist

$ROSE_TASK_MIRROR_TARGET{?} = unset
mirror.target = ${ROSE_TASK_MIRROR_TARGET}
$mirror_steplist{?} = $compile_scm
mirror.prop{config-file.steps} = $mirror_steplist

$um_project_location{?} = fcm:um.xm
$um_base{?} = trunk
$um_rev{?} = head
$jules_project_location{?} = fcm:jules.xm
$jules_base{?} = trunk
$jules_rev{?} = head
$socrates_project_location{?} = fcm:socrates.xm
$socrates_base{?} = trunk
$socrates_rev{?} = head
$casim_project_location{?} = fcm:casim.xm
$casim_base{?} = trunk
$casim_rev{?} = head

extract.ns = um jules socrates casim
extract.location{primary}[um] = $um_project_location
extract.location[um] = $um_base@$um_rev
extract.path-excl[um] = src/utility src/scm/stub     \
                      \ fcm-make rose-meta rose-stem admin \
                      \ CodeOwners.txt COPYRIGHT.txt
extract.location{primary}[jules] = $jules_project_location
extract.location[jules] = $jules_base@$jules_rev
extract.path-excl[jules] = /
extract.path-incl[jules] = src/control/shared src/control/um \
                         \ src/initialisation/shared src/initialisation/um \
                         \ src/params/um src/science
extract.location{primary}[socrates] = $socrates_project_location
extract.location[socrates] = $socrates_base@$socrates_rev
extract.path-excl[socrates] = /
extract.path-incl[socrates] = src/radiance_core

extract.location{primary}[casim] = $casim_project_location
extract.location[casim] = $casim_base@$casim_rev
extract.path-excl[casim] = COPYRIGHT.txt makefile \
                         \ src/mphys_die.F90 \
                         \ src/mphys_casim.F90

$SCM_EXEC{?} = um-scm.exe

# Required Shumlib library flags
$ldflags_shumlib{?} = -lshum_string_conv -lshum_constants

# CPP defaults:
$stash_version{?}  = 1A  # C84
$portio_version{?} = 2A  # C95
$mpp_version{?}    = 1C  # C96
$timer_version{?}  = 4A  # C97
$land_surface_model{?} = jules # land surface model
# Dr Hook defined in platform-specific configs or not used.

include = parallel.cfg

# Set app-dependent CPP defs:
$keys_scm_app{?} = SCMA=scma $cppflags_stash $cppflags_portio $cppflags_mpp $cppflags_timer $cppflags_land_surface $cppflags_drhook

# Set defaults for additional CPP defs:
$keys_platform_extra{?} =
$keys_scm_extra{?} =

# Gather Fortran compiler flags:
$fcflags_overrides{?} =
$fcflags_all = $fcflags_common $fcflags_level $fcflags_options $fcflags_overrides

# Exclusions for additional external modules:
$external_modules{?} =
$nodep_f_module = $nodep_options $external_modules

# Preprocess and build declarations
preprocess.prop{class,cpp} = $cpp
preprocess.prop{class,cpp.flags} = $cppflags

build.prop{class,cc} = $cc
build.prop{class,fc} = $fc
build.prop{class,cc.flags} = $ccflags
build.prop{class,fc.flags-ld} = $ldflags

$keys_scm{?} = $keys_platform $keys_platform_extra $keys_scm_app $keys_scm_extra
preprocess-scm.prop{cpp.defs,fpp.defs} = $keys_scm

build-scm.target        = um-scm um_script_functions $SCM_EXEC
build-scm.target-rename = scm_shell.exe:$SCM_EXEC
build-scm.prop{no-dep.f.module} = mpl gcom_mod netcdf \
                                \ f_shum_wgdos_packing_mod \
                                \ f_shum_string_conv_mod \
                                \ f_shum_latlon_eq_grids_mod \
                                \ f_shum_conversions_mod \
                                \ $nodep_f_module
build-scm.prop{fc.flags} = $fcflags_all
