#!/usr/bin/env bash
# *****************************COPYRIGHT******************************
# (C) Crown copyright Met Office. All rights reserved.
# For further details please refer to the file COPYRIGHT.txt
# which you should have received as part of this distribution.
# *****************************COPYRIGHT******************************
#-----------------------------------------------------------------------
# Code Owner: Please refer to the UM file CodeOwners.txt
# This file belongs in section: Rose scripts
#-----------------------------------------------------------------------
# NAME
#     um-recon
#
# SYNOPSIS
#     um-recon [EXE ...]
#
# DESCRIPTION
#     Set up the environment and trigger the reconfiguration executable with
#     "rose mpi-launch".
#
# ARGUMENTS
#     EXE
#          The command to launch. Defaults:
#          1. $RECON_EXEC
#          2. um-recon.exe
# 
# ENVIRONMENT VARIABLES
#     This script uses the following variables:
#
#     ANCILMSTR
#          Location of the ANCILmaster file.
#     DR_HOOK
#          Activate Dr Hook. Default=0 (off).
#     DR_HOOK_OPTS
#          Options to pass to Dr Hook. Default=noself.
#     RECON_EXEC
#          A command to launch. Default=um-recon.exe.
#     RECON_LAUNCHER
#          Command to run the recon under. Otherwise use rose mpi-launch.
#     RCF_PRINTSTATUS
#          Reconfiguration verbosity. Default=PrStatus_Normal.
#     RCF_TIMER
#          Reconfiguration timer switch. Default=false.
#     RCF_NPROCX
#          Number of processors east-west.
#     RCF_NPROCY
#          Number of processors north-south.
#     RECON_KEEP_MPP_STDOUT
#          Switch to keep stdout files after a successful run. Default=false.
#     RECON_STDOUT_FILE
#          Base filename for model stdout (PE) files. 
#          Default=pe_output/atmos.fort6.pe
#     RECONA_FNAME
#          RCF namelist file. Default=RECONA
#     SHARED_FNAME
#          SHARED_NLIST file. Default=SHARED
#     SIZES_FNAME
#          SIZES_NLIST file. Default=SIZES
#     STASHMASTER
#          Used to provide the location of the atmosphere STASHmaster file.
#          If it is not set the default path will be provided 
#          via the usf_set_stashmaster function of bin/um_script_functions.  
#     UM_THREAD_LEVEL
#          MPI threading level. Default=MULTIPLE.
#-----------------------------------------------------------------------

set -eu

# Source common UM script functions from file
um_scripts=$(dirname "$0")/um_script_functions
if [ -f "$um_scripts" ] ; then
    . $um_scripts
else
    echo "[FAIL] UM script functions file not found: $um_scripts " 1>&2
    echo "[FAIL] Ensure the UM file above is located in the same " 1>&2
    echo "[FAIL] directory as this script                        " 1>&2
    exit 1
fi

export DR_HOOK=${DR_HOOK:-0}
export DR_HOOK_OPT=${DR_HOOK_OPT:-noself}
export RCF_PRINTSTATUS=${RCF_PRINTSTATUS:-PrStatus_Normal}
export RCF_TIMER=${RCF_TIMER:-false}
export UM_THREAD_LEVEL=${UM_THREAD_LEVEL:-MULTIPLE}

# Set environment variable $VN to the current UM version
usf_set_um_vn
export ANCILMSTR=${ANCILMSTR:-$UMDIR/vn$VN/ctldata/ANCILmaster}

# Set the default STASHmaster path if not provided
usf_Set_STASHmaster
export STASHMASTER

# Processor variables
export NPROC=$((RCF_NPROCX * RCF_NPROCY))

export UANCLMSTR=$PWD
export RCF_NAMELIST=${RECONA_FNAME:-RECONA}
export SHARED_NLIST=${SHARED_FNAME:-SHARED}
export SIZES_NLIST=${SIZES_FNAME:-SIZES}
export IDEALISE=IDEALISE
export IOSCNTL=IOSCNTL
export RECONTMP=${RECONTMP:-atmos.recontmp}

export STDOUT_FILE=${RECON_STDOUT_FILE:-pe_output/atmos.fort6.pe}
mkdir -p $(dirname $STDOUT_FILE)
# Delete any previous .pe* files:
rm -f $STDOUT_FILE*

COMMAND="${@:-${RECON_EXEC:-$(dirname "$0")/um-recon.exe}}"
usf_which $COMMAND
usf_print_script_path

# Since we need to process some data after the executable we can trap the EXIT 
# signal to do this automatically whenever this script exits.  This also
# catches times when this script is killed for any reason.
SIGNALS='EXIT'
FINALLY() {
  for S in $SIGNALS; do
    trap '' $S # Switch off traps
  done

  PE0_SUFFIX=$(echo $((NPROC - 1)) | sed s/./0/g)
  RCF_PE0_STDOUT_FILE="${STDOUT_FILE}${PE0_SUFFIX}"
  if [[ -s "$RCF_PE0_STDOUT_FILE" ]]; then
    echo '%PE0 OUTPUT%'
    cat "$RCF_PE0_STDOUT_FILE"
  elif [[ -f "$RCF_PE0_STDOUT_FILE" ]]; then
    echo "PE0 file exists, but has zero size"
  else
    echo "Could not find PE0 output file: $RCF_PE0_STDOUT_FILE"
  fi

  # Remove output from other PEs unless requested otherwise
  if [[ ${RECON_KEEP_MPP_STDOUT:-false} == "false" ]] ; then
    for file in ${STDOUT_FILE}* ; do 
      if [[ $file != "$RCF_PE0_STDOUT_FILE" ]] ; then
        rm $file 
      fi 
    done
  fi

  if [[ -f "$RCF_PE0_STDOUT_FILE" ]]; then
    # rose-ana expects fixed filenames so we link to .pe0 as otherwise the
    # filename depends on the processor decomposition
    if [[ $RCF_PE0_STDOUT_FILE != ${STDOUT_FILE}0 ]]; then
      ln -sf $(basename $STDOUT_FILE)$PE0_SUFFIX ${STDOUT_FILE}0
    fi
  fi

  for corefile in ./*core*; do
    # make any core dump files world-readable, to assist in debugging problems
    [ -f "$corefile" ] && chmod uga+r "$corefile" || true
  done

}

for S in $SIGNALS; do
  trap 'FINALLY' $S
done

# Test if RECON_LAUNCHER is defined in the environment.
if [ ${RECON_LAUNCHER+1} ]; then
  # Run defined launcher. Caters for not running with any launcher.
  usf_Print "$RECON_LAUNCHER $COMMAND"
  $RECON_LAUNCHER $COMMAND
else
  rose mpi-launch -v $COMMAND
fi
